from flask import Flask, request, jsonify
import numpy as np
import pandas as pd
import pickle
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestRegressor
from sklearn.base import BaseEstimator, RegressorMixin

app = Flask(__name__)

# ğŸ”§ Model yÃ¼kleniyor
with open("boosted_model (1).pkl", "rb") as f:
    model = pickle.load(f)

# ğŸ“Š Veri dosyasÄ± yÃ¼kleniyor
df = pd.read_excel("sentetik_veri_kuru_yaz.xlsx")
df["TarihSaat"] = pd.to_datetime(df["TarihSaat"])
df.set_index("TarihSaat", inplace=True)

# ğŸ”® Su tahmin fonksiyonu
@app.route("/tahmin", methods=["POST"])
def tahmin():
    data = request.get_json()
    try:
        sicaklik = float(data["sicaklik"])
        hava_nemi = float(data["havaNemi"])
        toprak_nemi = float(data["toprakNemi"])
        isik = float(data["isik"])
    except (KeyError, ValueError):
        return jsonify({"error": "Eksik veya hatalÄ± veri girdisi"}), 400

    if toprak_nemi >= 40:
        return jsonify({"sulamaGerekliMi": "HayÄ±r", "suMiktari": 0})
    else:
        x_input = np.array([[sicaklik, hava_nemi, toprak_nemi, isik]])
        su = model.predict(x_input)[0]
        return jsonify({"sulamaGerekliMi": "Evet", "suMiktari": round(su, 2)})

# ğŸ“… Yeni endpoint: 30 gÃ¼nlÃ¼k tahmin
@app.route("/aylik_sulama_tahmini", methods=["POST"])
def aylik_sulama():
    data = request.get_json()
    try:
        baslangic = datetime.strptime(data["tarih"], "%Y-%m-%d")
        sicaklik = float(data["sicaklik"])
        hava_nemi = float(data["havaNemi"])
        isik = float(data["isik"])
        toprak_nemi = float(data["toprakNemi"])
    except:
        return jsonify({"error": "Eksik veya hatalÄ± veri seti"}), 400

    gun = baslangic
    sulama_gunleri = []
    toplam_su = 0

    for i in range(30):
        # Excel'den tahmini hava verileri Ã§ekilir
        try:
            satir = df.loc[gun]
            sicaklik = satir["SÄ±caklÄ±k (Â°C)"]
            hava_nemi = satir["Hava Nemi (%)"]
            isik = satir["IÅŸÄ±k (lux)"]
        except:
            pass  # Veri yoksa son bilinenler kalÄ±r

        if toprak_nemi < 40:
            x_input = np.array([[sicaklik, hava_nemi, toprak_nemi, isik]])
            su_miktari = model.predict(x_input)[0]
            su_miktari = round(su_miktari, 2)
            sulama_gunleri.append({
                "gun": gun.strftime("%Y-%m-%d"),
                "su": su_miktari
            })
            toplam_su += su_miktari
            toprak_nemi = 50  # Sulama yapÄ±ldÄ±

        # Nem azalÄ±mÄ± simÃ¼lasyonu
        toprak_nemi -= np.random.uniform(0.4, 1.1)
        toprak_nemi = max(toprak_nemi, 0)
        gun += timedelta(days=1)

    return jsonify({
        "sulamaGunleri": sulama_gunleri,
        "toplamSu": round(toplam_su, 2)
    })
@app.route("/grafik_verisi", methods=["GET"])
def grafik_verisi():
    try:
        df = pd.read_excel("sentetik_veri_kuru_yaz.xlsx")
        df["TarihSaat"] = pd.to_datetime(df["TarihSaat"])
        df = df.sort_values("TarihSaat")
        
        # Sadece gerekli sÃ¼tunlarÄ± al ve JSON'a Ã§evir
        df_out = df[["TarihSaat", "SÄ±caklÄ±k (Â°C)", "Hava Nemi (%)", "Toprak Nemi (%)", "IÅŸÄ±k (lux)"]].copy()
        df_out["TarihSaat"] = df_out["TarihSaat"].dt.strftime('%Y-%m-%d')

        result = df_out.rename(columns={
            "TarihSaat": "tarih",
            "SÄ±caklÄ±k (Â°C)": "sicaklik",
            "Hava Nemi (%)": "havaNemi",
            "Toprak Nemi (%)": "toprakNemi",
            "IÅŸÄ±k (lux)": "isik"
        })

        return jsonify(result.to_dict(orient="records"))

    except Exception as e:
        return jsonify({"error": f"Veri iÅŸlenirken hata oluÅŸtu: {str(e)}"}), 500


if __name__ == "__main__":
    app.run(debug=True)
